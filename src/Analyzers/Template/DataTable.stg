ClassDefinition(usingNamespaces, cNamespace, tableDescription, sqlMappingClassName) ::= 
"<usingNamespaces:{ns|using <ns>;<\n>}>
namespace <cNamespace>
{
    public partial class <sqlMappingClassName>
    {
        <DataTableDefinition(tableDescription)>
        
        public string GetSqlTableDefinition() => @\"
<SqlTableDefinition(tableDescription)><\\>
\";

        public void FillDataTables(IEnumerable\<<tableDescription.ClassName>> items)
        {
            <InvokeMethod(tableDescription, tableDescription.VarName, \"items\")>
        }
        
        <MethodDefinition(tableDescription)>
    }
}"

DataTableDefinition(tableDescription) ::= "<\\>
public DataTable <tableDescription.DataTableName> { get; } = new DataTable();<\\>
<tableDescription.SubTables:{t|<\n><DataTableDefinition(t)>}>"

InvokeMethod(table, varName, items) ::= "
foreach (var <varName> in <items>)
{
    <table.PreExecutionActions:{a|<a>}; separator=\"\n\">
    Add<table.EntityName>(<varName>);
    <table.SubTables:{t|<InvokeMethod(t, t.VarName, t.EnumerableName)>}; separator=\"\n\">
}"

MethodDefinition(table) ::= "
public void Add<table.EntityName>(<table.ClassName> <table.VarName>)
{
    <table.DataTableName>.Rows.Add(
        <table.Columns:{c|<c.ValueBody>};separator=\",\n\">
    );
}<\\>
<table.SubTables:{t|<\n><\n><MethodDefinition(t)>}>"

SqlTableDefinition(table) ::= "<\\>
CREATE TABLE <table.SqlTableName>
(
    <table.Columns:{c|<c.SqlColumnName> <c.SqlType>}; separator=\",\n\">
);
<table.SubTables:{t|<\n><SqlTableDefinition(t)>}>"